## 树
    树的基本概念
        树：
        树（Tree）是n（n>=0）个结点的有限集
        树有且仅有一个根结点
        树的结点包含一个数据元素一级若干指向子树的分支
        
        度：
        结点拥有的子树的个数被称为结点的度（比如，二叉树每个结点的度最大为2，最小为0(叶子结点)）
        度为0的结点称为叶子结点(Leaf) 或终端结点
        树的度是树内各结点的度的最大值（就是那个结点的度最大，那么这个结点的度就是这棵树的度）
        
        结点：
        结点的子树的根称为该节点的孩子，相应的，该结点称为孩子的双亲
        同一个双亲的孩子叫做兄弟
        其双亲在同一层的叫做堂兄弟
        节点的祖先是从根结点到该结点所经分支上的所有结点
        
        层次：
        结点的层次,从根开始定义起，根称为第一层，根的孩子为第二层
        树中结点的最大层次为树的深度或者高度
        
        深度高度：
        结点的深度是从根节点往下一直到该结点
        结点的高度从最底的叶子节点一直到该结点
        相同深度的节点，高度不一定相同
        高度取决于该结点到终端节点的距离
        深度取决于该结点到根节点距离
        
###二叉树
        每个结点最多有两棵子树，二叉树中不存在度大于2的结点
        左子树和右子树是有顺序的，不能颠倒
        即使树中的某结点只有一棵子树，也要区分是左子树还是右子树
        二叉树有五种形态，空树，只有根结点，根节点只有左子树，根节点只有右子树，根节点左右子树都有

###满二叉树
        所有的分支结点都存在左右子树，所有的叶子结点都在同一层，则这个二叉树是满二叉树
        叶子结点只能出现在最底层
        非叶子结点的度一定为2
        在同样深度的二叉树中，满二叉树的结点个数最多，叶子结点最多

###完全二叉树
        如果编号为I的结点与同样高度的满二叉树中编号为I的结点在二叉树中位置完全相同，则这个二叉树称为完全二叉树（也就是叶子结点层差为1）
        完全二叉树的叶子结点只能出现在最下两层
        最底层的叶子结点一定集中在左边连续位置
        如果结点度为1，则结点只有左孩子，没有右孩子
        同样结点的二叉树，完全二叉树深度最小
###二叉树的性质
        在二叉树上第I层上至多有2(i-1)次方个结点
        深度为K的二叉树至多有2的k次方减1个结点                
        在二叉树T中，如果叶子结点的个数为n，度为2的结点的个数为m，则n = m+1
        具有n个结点的完全二叉树的深度为log2n + 1
        如果对一棵有n个结点的完全二叉树，结点编号从1到n(每层从左到右)对于任意一结点 1<= i <= n,则有
            1、如果i等于1，则i为根结点，无双亲，如果i>1,则双亲结点为i/2
            2、如果2*i大于n，则结点i无左孩子（结点i为叶子结点），否则，左孩子是结点2*i
            3、如果2*i大于n+1,则结点i无右孩子，否则右孩子结点是2*i+1
            
###二叉查找树
        称为二叉排序树，或二叉搜索树，
        若左子树不为空，则左子树所有结点的值小于根结点的值
        若右子树不为空，则右子树所有结点的值大于根结点的值
        左右子树也分别为二叉排序树
        没有键值相等的结点
        对二叉排序树进行中序遍历，可得到有序的序列
        二叉排序树的插入和查找时间复杂度均为O(logn),最坏情况下可能为O(n)，因为极端情况下，二叉查找树会退化成链
        二叉查找树的高度决定了二叉查找树的效率，高度越高，效率越低。
        二叉查找树的插入过程如下：
            若当前二叉查找树为空，则插入的元素为根结点
            若插入的元素值小于根结点值，则将元素插入到左子树
            若插入的元素的值大于根结点，则将元素插入到右子树
        二叉查找树的删除（https://blog.csdn.net/zxnsirius/article/details/52131433）
            若删除的结点p是叶子结点，则，直接删除，并修改父结点的指针（区分根结点和非根结点）
            若删除的结点p是单支结点，则让p的子树和p的父结点相连
            若删除的结点p 左子树和右子树均不为空，则需要找到一个结点的值在左右子树的中间   

###AVL树（自平衡而查找树）
        AVL树是最先发明的自平衡二叉查找树，在AVL中任何节点的两个儿子子树的高度最大差别为1，所以它也被称为高度平衡树                     
        http://lib.csdn.net/article/datastructure/10654 (主要理解旋转)


###字典树（Tire）
        Tire树被称为字典树，又称单词查找树，Tire树，是一种树形结构，是一种哈希树的变种。
        典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。
        它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高
        Tire树的三个基本性质：
        　　1) 根节点不包含字符，除根节点外每一个节点都只包含一个字符；
        　　2) 从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串；
        　　3) 每个节点的所有子节点包含的字符都不相同。
        Tire树的应用：
        　　1) 串的快速检索
        　　      给出N个单词组成的熟词表，以及一篇全用小写英文书写的文章，请你按最早出现的顺序写出所有不在熟词表中的生词。
                  在这道题中，我们可以用数组枚举，用哈希，用字典树，先把熟词建一棵树，然后读入文章进行比较，这种方法效率是比较高的。
        　　2) “串”排序
        　　      给定N个互不相同的仅由一个单词构成的英文名，让你将他们按字典序从小到大输出。用字典树进行排序，采用数组的方式创建字典树，这棵树的每个结点的所有儿子很显然地按照其字母大小排序。对这棵树进行先序遍历即可。
        　　3) 最长公共前缀
        　　      对所有串建立字典树，对于两个串的最长公共前缀的长度即他们所在的结点的公共祖先个数，于是，问题就转化为求公共祖先的问题。
            